{"version":3,"sources":["../src/app.js"],"names":["server","Server","connections","routes","files","relativeTo","Path","join","__dirname","validateConfig","connection","port","registerPlugins","loadAndRegisterRouteModules","logger","log","JSON","stringify","start","info","uri","err","error","stack","startServer","configuration","joiValidatePromisified","bluebird","promisify","validate","e","message","pluginModules","loadProjectPluginModules","serverRegisterPromisified","register","bind","options","tags","api","title","name","description","version","path","authorization","field","scope","defaultValue","placeholder","swaggerOptions","concat","pluginFilePaths","glob","cwd","map","filePath","pluginModule","require","routeFilePaths","routeModules","routeModule","originalHandler","default","config","handler","handlerWrapper","route","Boom","hapiJWT","process","env","NODE_PATH","Module","_initPaths","console","startServerCluster","cluster","numCPUs","cpus","length","isMaster","i","fork","on","worker","code","signal","pid","req","reply","result","Error","wrap"],"mappings":";;AA4BA;;;;+BAGA,aAA8B;AAC5B,QAAI;AACF;AACA,YAAMA,SAAS,IAAI,eAAKC,MAAT,CAAgB;AAChCC,qBAAa;AACZC,kBAAQ;AACPC,mBAAO;AACNC,0BAAYC,KAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB;AADN;AADA;AADI;AADmB,OAAhB,CAAf;AASA,YAAMC,8BAAN;AACAT,aAAOU,UAAP,CAAkB,EAACC,MAAM,eAAOX,MAAP,CAAcW,IAArB,EAAlB;AACA,YAAMC,gBAAgBZ,MAAhB,CAAN;AACA,YAAMa,4BAA4Bb,MAA5B,CAAN;;AAEAc,aAAOC,GAAP,CAAY,wCAAuCC,KAAKC,SAAL,iBAAuB,IAAvB,EAA6B,CAA7B,CAAgC,EAAnF;;AAEA,YAAMjB,OAAOkB,KAAP,EAAN;;AAEAJ,aAAOC,GAAP,CAAW,oBAAX,EAAiCf,OAAOmB,IAAP,CAAYC,GAA7C;AACD,KArBD,CAqBE,OAAOC,GAAP,EAAY;AACZP,aAAOQ,KAAP,CAAc,UAASD,IAAIE,KAAM,EAAjC;AACD;AACF,G;;kBAzBcC,W;;;;;AA2Bf;;;;;AAqBA;;;;;gCAIA,WAA+BC,aAA/B,EAA8C;AAC5C,QAAIC,yBAAyBC,SAASC,SAAT,CAAmB,cAAIC,QAAvB,CAA7B;AACA,QAAI;AACF,YAAMH,uBAAuBD,aAAvB,wBAAN;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACVhB,aAAOQ,KAAP,CAAc,+BAA8BQ,EAAEC,OAAQ,EAAtD;AACD;AACF,G;;kBAPctB,c;;;;;AASf;;;;;;;gCAIA,WAAgCT,MAAhC,EAAwC;AACtC,QAAIgC,gBAAgB,MAAMC,0BAA1B;AACA,QAAIC,4BAA4BP,SAASC,SAAT,CAAmB5B,OAAOmC,QAAP,CAAgBC,IAAhB,CAAqBpC,MAArB,CAAnB,CAAhC;AACA,WAAOkC,0BAA0B,kBACxB;AADwB,sBAEvB;AACR;AACEC,uCADF;AAEEE,eAAS;AACPC,cAAM;AACJC,eAAK;AADD,SADC;AAIPpB,cAAM;AACJqB,iBAAO,kBAAKC,IADR;AAEJC,uBAAa,kBAAKA,WAFd;AAGJC,mBAAS,kBAAKA;AAHV;AAJC;AAFX,KAH+B,EAgB/B;AACER,yCADF;AAEEE,eAAS;AACPG,eAAO,kBAAKC,IADL;AAEPG,cAAM,OAFC;;AAIPC,uBAAe,EAAE;AACfC,iBAAO,QADM;AAEbC,iBAAO,OAFM,EAEG;AAChB;AACAC,wBAAc,SAJD;AAKbC,uBAAa;AALA,SAJR;AAWPC,wBAAgB,EAXT,CAYL;AAZK;AAFX,KAhB+B,EAiC/BC,MAjC+B,CAiCxBnB,aAjCwB,CAA1B,CAAP;AAkCD,G;;kBArCcpB,e;;;;;AAuCf;;;;;;;gCAIA,aAA2C;AACzC,QAAIwC,kBAAkB,MAAMC,KAAK,mBAAL,EAA0B,EAACC,KAAK,SAAN,EAA1B,CAA5B;AACA,QAAItB,gBAAgBoB,gBAAgBG,GAAhB,CAAoB,UAACC,QAAD,EAAY;AAClD,UAAIC,eAAeC,QAAQF,QAAR,CAAnB,CADkD,CACb;AACrC,aAAOC,YAAP;AACD,KAHmB,CAApB;AAIA,WAAOzB,aAAP;AACD,G;;kBAPcC,wB;;;;;AASf;;;;;;;;gCAKA,WAA4CjC,MAA5C,EAAoD;AAClD;AACA,QAAI2D,iBAAiB,MAAMN,KAAK,kBAAL,EAAyB,EAACC,KAAK,SAAN,EAAzB,CAA3B;AACAxC,WAAOC,GAAP,CAAY,sBAAqBC,KAAKC,SAAL,CAAe0C,cAAf,EAA+B,IAA/B,EAAqC,CAArC,CAAwC,EAAzE;;AAEA;AACA,QAAIC,eAAeD,eAAeJ,GAAf,CAAmB,UAACC,QAAD,EAAY;AAChD;AACA,UAAIK,cAAcH,QAAQF,QAAR,CAAlB,CAFgD,CAEX;;AAErC,UAAIM,kBAAkBD,YAAYE,OAAZ,CAAoBC,MAApB,CAA2BC,OAAjD;AACA,UAAG,OAAOJ,YAAYE,OAAZ,CAAoBC,MAApB,CAA2BC,OAAlC,KAA8C,UAAjD,EAA4D;AAC7DJ,oBAAYE,OAAZ,CAAoBC,MAApB,CAA2BC,OAA3B,GAAqCC,eAAeJ,eAAf,CAArC;AACA;AACC,aAAOD,YAAYE,OAAnB;AACD,KATkB,CAAnB;;AAWA/D,WAAOmE,KAAP,CAAaP,YAAb;AACD,G;;kBAlBc/C,2B;;;;;AAoBf;;;;;;;AAnKA;;IAYYc,Q;;AAXZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;IAAYyC,I;;AACZ;;;;AACA;;;;AACA;;IAAYC,O;;AAEZ;;AACA;;;;;;sGAFY1C,Q,oNAAAA,Q;;AAtBZ;AACA;AACA;;AAEA;AACA;AACA2C,QAAQC,GAAR,CAAYC,SAAZ,GAAwBhE,SAAxB;AACAkD,QAAQ,QAAR,EAAkBe,MAAlB,CAAyBC,UAAzB;AACAC,QAAQ5D,GAAR,CAAY,kBAAkBuD,QAAQC,GAAR,CAAYC,SAA1C;;AASA,MAAMnB,OAKM1B,QALC,SAAQC,SAAR,CAAkB8B,QAAQ,MAAR,CAAlB,CAAb;;AAQA,IAAIpD,OAAOoD,QAAQ,MAAR,CAAX;AACA,IAAI5C,SAAS6D,OAAb,CAmCA,SAASC,kBAAT,GAA+B;AAC7B,QAAMC,UAAUnB,QAAQ,SAAR,CAAhB;AACA,QAAMoB,UAAUpB,QAAQ,IAAR,EAAcqB,IAAd,GAAqBC,MAArC;AACAlE,SAAOK,IAAP,CAAa,iCAAgC2D,OAAQ,OAArD;AACA,MAAID,QAAQI,QAAZ,EAAsB;AACpB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAApB,EAA6BI,GAA7B,EAAkC;AAChCL,cAAQM,IAAR;AACD;;AAEDN,YAAQO,EAAR,CAAW,MAAX,EAAmB,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,KAA0B;AAC3CzE,aAAOC,GAAP,CAAY,UAASsE,OAAOf,OAAP,CAAekB,GAAI,OAAxC;AACD,KAFD;AAGD,GATD,MASO;AACLhE;AACD;AACF,CAqGD,SAAS0C,cAAT,CAAyBJ,eAAzB,EAA0C;AACxC;AAAA,kCAAO,WAAO2B,GAAP,EAAYC,KAAZ,EAAoB;AACzB,UAAI;AACF,YAAIC,SAAS,MAAM7B,gBAAgB2B,GAAhB,EAAqBC,KAArB,CAAnB;AACA,eAAOC,MAAP;AACD,OAHD,CAGE,OAAO7D,CAAP,EAAU;AACV,YAAIR,QAAQQ,aAAa8D,KAAb,GAAqB9D,CAArB,GAAyB,IAAI8D,KAAJ,CAAU9D,CAAV,CAArC;AACAhB,eAAOQ,KAAP,CAAc,0BAAyBQ,EAAEP,KAAM,EAA/C;AACA,eAAOmE,MAAMtB,KAAKyB,IAAL,CAAUvE,KAAV,EAAiB,GAAjB,EAAsB,wCAAtB,CAAN,CAAP;AACD;AACF,KATD;;AAAA;AAAA;AAAA;AAAA;AAUD;;AAED;AACA;AACAsD","file":"app.js","sourcesContent":["/* eslint no-process-env: \"off\" */\n/* eslint no-sync: \"off\" */\n/* eslint global-require: \"off\" */\n\n// allow imports/requires to use non-relative paths to load other modules.\n// e.g. instead of require('../../services/health') we can use require('services/health')\nprocess.env.NODE_PATH = __dirname;\nrequire('module').Module._initPaths();\nconsole.log('NODE_PATH is ' + process.env.NODE_PATH);\n\nimport Promise from 'bluebird';\nimport Hapi from 'hapi';\nimport Inert from 'inert';\nimport Vision from 'vision';\nimport HapiSwaggered from 'hapi-swaggered';\nimport HapiSwaggeredUI from 'hapi-swaggered-ui';\nimport Pack from '../package';\nconst glob = Promise.promisify(require('glob'));\nimport * as Boom from 'boom';\nimport Joi from 'joi';\nimport fs from 'fs';\nimport * as hapiJWT from 'hapi-auth-jwt2';\nimport * as bluebird from 'bluebird';\nimport {config} from './config/config';\nimport {configSchema} from './schemas/config/config';\nlet Path = require('path');\nlet logger = console;\n\n/**\n * Starts the hapi server, registering all routes found in the /lib/routes folder.\n */\nasync function startServer () {\n  try {\n    // Create a server with a host and port\n    const server = new Hapi.Server({\n\t\t\tconnections: {\n\t\t\t\troutes: {\n\t\t\t\t\tfiles: {\n\t\t\t\t\t\trelativeTo: Path.join(__dirname, '../public')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n    await validateConfig(config);\n    server.connection({port: config.server.port});\n    await registerPlugins(server);\n    await loadAndRegisterRouteModules(server);\n\n    logger.log(`starting service with configuration: ${JSON.stringify(config, null, 2)}`);\n\n    await server.start();\n\n    logger.log('Server running at:', server.info.uri);\n  } catch (err) {\n    logger.error(`error: ${err.stack}`);\n  }\n}\n\n/**\n * Creates a node cluster so that each cpu core can be used.\n */\nfunction startServerCluster () {\n  const cluster = require('cluster');\n  const numCPUs = require('os').cpus().length;\n  logger.info(`creating a server cluster for ${numCPUs} cpus`);\n  if (cluster.isMaster) {\n    // Fork workers.\n    for (var i = 0; i < numCPUs; i++) {\n      cluster.fork();\n    }\n\n    cluster.on('exit', (worker, code, signal) => {\n      logger.log(`worker ${worker.process.pid} died`);\n    });\n  } else {\n    startServer();\n  }\n}\n\n/**\n * Validates that appropriate environment variables were passed in. (\n * @param configuration - config object typically found in config/config\n */\nasync function validateConfig (configuration) {\n  let joiValidatePromisified = bluebird.promisify(Joi.validate);\n  try {\n    await joiValidatePromisified(configuration, configSchema);\n  } catch (e) {\n    logger.error(`Server config is not valid: ${e.message}`);\n  }\n}\n\n/**\n * Registers all needed hapi plugins (Swagger, Vision, etc)\n * @param server - hapi server instance which will have plugins registered\n */\nasync function registerPlugins (server) {\n  let pluginModules = await loadProjectPluginModules();\n  let serverRegisterPromisified = bluebird.promisify(server.register.bind(server));\n  return serverRegisterPromisified([\n    Inert, // Static file and directory handlers plugin for hapi.js.\n    Vision, // Templates rendering plugin support for hapi.js.\n    {\n      register: HapiSwaggered,\n      options: {\n        tags: {\n          api: 'description'\n        },\n        info: {\n          title: Pack.name,\n          description: Pack.description,\n          version: Pack.version\n        }\n      }\n    },\n    {\n      register: HapiSwaggeredUI,\n      options: {\n        title: Pack.name,\n        path: '/docs',\n\n        authorization: { // see above\n          field: 'apiKey',\n          scope: 'query', // header works as well\n          // valuePrefix: 'bearer '// prefix incase\n          defaultValue: 'demoKey',\n          placeholder: 'Enter your apiKey here'\n        },\n        swaggerOptions: {\n        } // see above\n      }\n    }\n  ].concat(pluginModules));\n}\n\n/**\n * Loads our custom plugins (such as logRequests) from the plugin dir.\n * @returns {*|Array}\n */\nasync function loadProjectPluginModules () {\n  let pluginFilePaths = await glob('./plugins/**/*.js', {cwd: './build'});\n  let pluginModules = pluginFilePaths.map((filePath)=>{\n    let pluginModule = require(filePath);//eslint-disable-line\n    return pluginModule;\n  });\n  return pluginModules;\n}\n\n/**\n * Finds all routes in the compiled lib/routes directory and registers them with the hapi server.\n * Route modules are expected to export default { method: 'GET', path: ...}\n * Assigns auth='jwt' for all routes, unless BYPASS_USER_AUTH is 'true' (for local dev)\n */\nasync function loadAndRegisterRouteModules (server) {\n  // find all route file paths\n  let routeFilePaths = await glob('./routes/**/*.js', {cwd: './build'});\n  logger.log(`route files found: ${JSON.stringify(routeFilePaths, null, 2)}`);\n\n  // load module from each file path\n  let routeModules = routeFilePaths.map((filePath)=>{\n    // since we can't use import anywhere but at the top, use require, and grab the .default property (ie the module)\n    let routeModule = require(filePath); // eslint-disable-line\n\n    let originalHandler = routeModule.default.config.handler;\n    if(typeof routeModule.default.config.handler === 'function'){\n\t\t\trouteModule.default.config.handler = handlerWrapper(originalHandler);\n\t\t}\n    return routeModule.default;\n  });\n\n  server.route(routeModules);\n}\n\n/**\n * Wrap all handlers with this function so we don't have to do a try catch block in every handler.\n * @param originalHandler\n * @returns {function(*=, *=)}\n */\nfunction handlerWrapper (originalHandler) {\n  return async (req, reply)=>{\n    try {\n      let result = await originalHandler(req, reply);\n      return result;\n    } catch (e) {\n      let error = e instanceof Error ? e : new Error(e);\n      logger.error(`Error was encountered: ${e.stack}`);\n      return reply(Boom.wrap(error, 500, 'uncaught exception in handler function'));\n    }\n  };\n}\n\n// start the server\n// startServer();\nstartServerCluster();\n"]}