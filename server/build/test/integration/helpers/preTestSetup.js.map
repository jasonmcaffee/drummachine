{"version":3,"sources":["../../../../src/test/integration/helpers/preTestSetup.js"],"names":["console","log","ls","spawn","serverStartedPromise","Promise","resolve","reject","stdout","on","data","indexOf","stderr","error","code","jasmine","getEnv","addReporter","jasmineDone","kill","process","afterAll","done","setupIntegration","env","NODE_ENV","__dirname","cwd","NODE_PATH","require","Module","_initPaths","beforeAll"],"mappings":";;AAqBA;;;;;;gCAKA,aAAmC;AACjCA,YAAQC,GAAR,CAAY,uCAAZ;AACA,UAAMC,KAAKC,MAAM,KAAN,EAAa,CAAC,KAAD,EAAQ,uBAAR,CAAb,CAAX;;AAEA,QAAIC,uBAAuB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACxDL,SAAGM,MAAH,CAAUC,EAAV,CAAa,MAAb,EAAqB,UAACC,IAAD,EAAU;AAC7BV,gBAAQC,GAAR,CAAa,WAAUS,IAAK,EAA5B;AACA,YAAIA,KAAKC,OAAL,CAAa,gBAAb,KAAkC,CAAtC,EAAyC;AACvCX,kBAAQC,GAAR,CAAY,qCAAZ;AACAK;AACD;AAEF,OAPD;;AASAJ,SAAGU,MAAH,CAAUH,EAAV,CAAa,MAAb,EAAqB,UAACC,IAAD,EAAU;AAC7BV,gBAAQa,KAAR,CAAe,WAAUH,IAAK,EAA9B;AACA,YAAIA,KAAKC,OAAL,CAAa,aAAb,IAA8B,CAA9B,IAAmCD,KAAKC,OAAL,CAAa,+BAAb,IAAgD,CAAvF,EAA0F;AACxF;AACA;AACD;AACF,OAND;;AAQAT,SAAGO,EAAH,CAAM,OAAN,EAAe,UAACK,IAAD,EAAU;AACvBd,gBAAQC,GAAR,CAAa,kCAAiCa,IAAK,EAAnD;AACAP,eAAO,EAACO,IAAD,EAAP;AACD,OAHD;AAKD,KAvB0B,CAA3B;;AAyBA;AACAC,YAAQC,MAAR,GAAiBC,WAAjB,CAA6B;AAC3BC,oBAAe;AACblB,gBAAQC,GAAR,CAAY,6DAAZ;AACAC,WAAGiB,IAAH;AACD;AAJ0B,KAA7B;;AAOAC,YAAQX,EAAR,CAAW,YAAX,EAAyB,YAAI;AAC3BT,cAAQC,GAAR,CAAY,uBAAZ;AACAC,SAAGiB,IAAH;AACD,KAHD;;AAKAC,YAAQX,EAAR,CAAW,MAAX,EAAmB,YAAI;AACrBT,cAAQC,GAAR,CAAY,iBAAZ;AACAC,SAAGiB,IAAH;AACD,KAHD;;AAKAE,aAAS,UAACC,IAAD,EAAQ;AACftB,cAAQC,GAAR,CAAY,iBAAZ;AACAC,SAAGiB,IAAH;AACAG;AACD,KAJD;;AAMA,WAAO,MAAMlB,oBAAb;AACD,G;;kBAtDcmB,gB;;;;;;;AA1Bf;AACA;;;;AAIAvB,QAAQC,GAAR,CAAY,iDAAZ;AACAD,QAAQC,GAAR,CAAa,aAAYmB,QAAQI,GAAR,CAAYC,QAAS,EAA9C;AACAzB,QAAQC,GAAR,CAAY,UAAUyB,SAAtB;AACA1B,QAAQC,GAAR,CAAY,SAASmB,QAAQO,GAAR,EAArB;AACAP,QAAQI,GAAR,CAAYI,SAAZ,GAAwBR,QAAQO,GAAR,KAAgB,QAAxC;AACAE,QAAQ,QAAR,EAAkBC,MAAlB,CAAyBC,UAAzB;AACA/B,QAAQC,GAAR,CAAY,kBAAkBmB,QAAQI,GAAR,CAAYI,SAA1C;;AAEA,MAAMzB,QAAQ0B,QAAQ,eAAR,EAAyB1B,KAAvC;;AAEA6B;AAAA,+BAAU,WAAOV,IAAP,EAAc;AACtB;AACAtB,YAAQC,GAAR,CAAY,gCAAZ;AACAqB;AACD,GAJD;;AAAA;AAAA;AAAA;AAAA","file":"preTestSetup.js","sourcesContent":["/* eslint no-process-env: \"off\" */\n/**\n * We don't want to use relative paths when requiring modules, so we need to set the NODE_PATH to be root/build.\n * Helpers execute before specs run.\n */\nconsole.log('integration test preTestSetup script running...');\nconsole.log(`NODE_ENV: ${process.env.NODE_ENV}`);\nconsole.log('dir: ' + __dirname);\nconsole.log('cwd:' + process.cwd());\nprocess.env.NODE_PATH = process.cwd() + '/build';\nrequire('module').Module._initPaths();\nconsole.log('NODE_PATH is ' + process.env.NODE_PATH);\n\nconst spawn = require('child_process').spawn;\n\nbeforeAll(async (done)=>{\n  //await setupIntegration();\n  console.log('starting integration tests....');\n  done();\n});\n\n/**\n * Runs the 'npm run docker:runintegration' script so that an env is created we can test against.\n * This function tries hard to ensure the docker container is killed should any problems arise during testing.\n * @returns {Promise}\n */\nasync function setupIntegration () {\n  console.log('setting up for integration testing...');\n  const ls = spawn('npm', ['run', 'docker:runintegration']);\n\n  let serverStartedPromise = new Promise((resolve, reject)=>{\n    ls.stdout.on('data', (data) => {\n      console.log(`stdout: ${data}`);\n      if (data.indexOf('Server running') >= 0) {\n        console.log('server is running. tests can begin.');\n        resolve();\n      }\n\n    });\n\n    ls.stderr.on('data', (data) => {\n      console.error(`stderr: ${data}`);\n      if (data.indexOf('os.tmpDir()') < 0 && data.indexOf('the input device is not a TTY') < 0) {\n        // reject(data);\n        // ls.kill();//force the process to die\n      }\n    });\n\n    ls.on('close', (code) => {\n      console.log(`child process exited with code ${code}`);\n      reject({code});\n    });\n\n  });\n\n  // when a timeout occurs, jasmine doesn't run anything. by adding a reporter, we can know for sure when jasmine is done testing.\n  jasmine.getEnv().addReporter({\n    jasmineDone () {\n      console.log('############################jasmine is done################');\n      ls.kill();\n    }\n  });\n\n  process.on('beforeExit', ()=>{\n    console.log('process beforeExit...');\n    ls.kill();\n  });\n\n  process.on('exit', ()=>{\n    console.log('process exit...');\n    ls.kill();\n  });\n\n  afterAll((done)=>{\n    console.log('done with stuff');\n    ls.kill();\n    done();\n  });\n\n  return await serverStartedPromise;\n}\n"]}