{"version":3,"sources":["../../../src/services/health/health.js"],"names":["os","service","getHealth","serverStatus","osStatus","subsystemStatuses","systemOverallStatus","reduce","previous","current","ok","status","config","hostname","type","platform","arch","release","uptime","loadavg","totalmem","freemem","cpus","networkInterfaces"],"mappings":";;;;;;;AAAA;;AACA;;IAAYA,E;;;;;;AAEZ;;;;;AAKO,IAAIC,4BAAU;;AAEnB;;;;AAIAC;AAAA,iCAAW,aAAkB;AAC3B,UAAIC,eAAe,KAAKA,YAAxB;AACA,UAAIC,WAAW,KAAKA,QAApB;AACA,UAAIC,oBAAoB,CACtBF,YADsB,EAEtBC,QAFsB,CAAxB;;AAKA;AACA,UAAIE,sBAAsBD,kBAAkBE,MAAlB,CAAyB,UAACC,QAAD,EAAWC,OAAX,EAAqB;AACtE,eAAO;AACLC,cAAIF,SAASE,EAAT,IAAeD,QAAQC;AADtB,SAAP;AAGD,OAJyB,CAA1B;;AAMA,UAAIC,SAAS;AACXL,2BADW;AAEXH,oBAFW;AAGXC;AAHW,OAAb;;AAMA,aAAOO,MAAP;AACD,KAtBD;;AAAA;AAAA;AAAA;AAAA,MANmB;;AA+BnB;;;;AAIA,MAAIR,YAAJ,GAAoB;AAClB,WAAO;AACL,UAAIO,EAAJ,GAAU;AACR,eAAO,IAAP;AACD,OAHI;AAILE;AAJK,KAAP;AAMD,GA1CkB;;AA4CnB;;;;AAIA,MAAIR,QAAJ,GAAgB;AACd,WAAO;AACLM,UAAI,IADC;AAELG,gBAAUb,GAAGa,QAAH,EAFL;AAGLC,YAAMd,GAAGc,IAAH,EAHD;AAILC,gBAAUf,GAAGe,QAAH,EAJL;AAKLC,YAAMhB,GAAGgB,IAAH,EALD;AAMLC,eAASjB,GAAGiB,OAAH,EANJ;AAOLC,cAAQlB,GAAGkB,MAAH,EAPH;AAQLC,eAASnB,GAAGmB,OAAH,EARJ;AASLC,gBAAUpB,GAAGoB,QAAH,EATL;AAULC,eAASrB,GAAGqB,OAAH,EAVJ;AAWLC,YAAMtB,GAAGsB,IAAH,EAXD;AAYLC,yBAAmBvB,GAAGuB,iBAAH;AAZd,KAAP;AAcD;AA/DkB,CAAd","file":"health.js","sourcesContent":["import {config} from 'config/config';\nimport * as os from 'os';\n\n/**\n * Service responsible for gathering server and subsystem health/status.\n * e.g. ensuring we can connect to couchbase and various other dbs.\n * @type {{health, couchbaseStatus, serverStatus, osStatus}}\n */\nexport let service = {\n\n  /**\n   * Returns summary of system health, including db connectivity, os info, etc.\n   * @returns {Promise.<{systemOverallStatus: *, serverStatus: *, osStatus: *}>}\n   */\n  getHealth: async function () {\n    let serverStatus = this.serverStatus;\n    let osStatus = this.osStatus;\n    let subsystemStatuses = [\n      serverStatus,\n      osStatus\n    ];\n\n    // iterate over each status and if one is not ok, the overall status will not be ok.\n    let systemOverallStatus = subsystemStatuses.reduce((previous, current)=>{\n      return {\n        ok: previous.ok && current.ok\n      };\n    });\n\n    let status = {\n      systemOverallStatus,\n      serverStatus,\n      osStatus\n    };\n\n    return status;\n  },\n\n\n  /**\n   * returns server status along with config\n   * @returns {{ok, config: *}}\n   */\n  get serverStatus () {\n    return {\n      get ok () {\n        return true;\n      },\n      config: config\n    };\n  },\n\n  /**\n   * returns os info available to node's os module.\n   * @returns {{ok: boolean, hostname: *, type, platform: *, arch: *, release: *, uptime: *, loadavg: *, totalmem: *, freemem: *, cpus: *, networkInterfaces: *}}\n   */\n  get osStatus () {\n    return {\n      ok: true,\n      hostname: os.hostname(),\n      type: os.type(),\n      platform: os.platform(),\n      arch: os.arch(),\n      release: os.release(),\n      uptime: os.uptime(),\n      loadavg: os.loadavg(),\n      totalmem: os.totalmem(),\n      freemem: os.freemem(),\n      cpus: os.cpus(),\n      networkInterfaces: os.networkInterfaces()\n    };\n  }\n};\n"]}