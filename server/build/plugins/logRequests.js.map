{"version":3,"sources":["../../src/plugins/logRequests.js"],"names":["logger","console","logRequestsPlugin","register","server","options","next","ext","request","reply","plugins","startTime","Date","now","continue","on","ignoreUrls","ignore","url","href","indexOf","endTime","duration","requestData","requestId","id","headers","method","toUpperCase","statusCode","response","responseTimeMilli","remoteAddress","info","responseBytes","_payload","size","minimalRequestData","userAgent","log","JSON","stringify","attributes","name","version"],"mappings":";;;;;AAAA;AACA,IAAIA,SAASC,OAAb;;AAEA;;;;AAIA,IAAIC,oBAAoB;AACtBC,YAAU,CAACC,MAAD,EAASC,OAAT,EAAkBC,IAAlB,KAA2B;;AAEnC;AACAF,WAAOG,GAAP,CAAW,WAAX,EAAwB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;AAChD;AACAD,cAAQE,OAAR,CAAgBC,SAAhB,GAA4BC,KAAKC,GAAL,EAA5B;AACA,aAAOJ,MAAMK,QAAN,EAAP;AACD,KAJD;;AAMA;AACAV,WAAOW,EAAP,CAAU,UAAV,EAAuBP,OAAD,IAAY;AACnC,UAAIQ,aAAa,CAAC,MAAD,EAAS,KAAT,EAAgB,MAAhB,EAAwB,MAAxB,CAAjB;AACA,WAAI,IAAIC,MAAR,IAAkBD,UAAlB,EAA6B;AAC5B,YAAGR,QAAQU,GAAR,CAAYC,IAAZ,CAAiBC,OAAjB,CAAyBH,MAAzB,KAAmC,CAAtC,EAAwC;AAAC;AAAQ;AACjD;AACE;AACA,UAAII,UAAUT,KAAKC,GAAL,EAAd;AACA,UAAIS,WAAWD,UAAUb,QAAQE,OAAR,CAAgBC,SAAzC;AACA;AACA,UAAIY,cAAc;AAChBC,mBAAWhB,QAAQiB,EADH;AAEhBC,iBAASlB,QAAQkB,OAFD;AAGhBC,gBAAQnB,QAAQmB,MAAR,CAAeC,WAAf,EAHQ;AAIhBV,aAAKV,QAAQU,GAAR,CAAYC,IAJD;AAKhBU,oBAAYrB,QAAQsB,QAAR,CAAiBD,UALb;AAMhBE,2BAAmBT,QANH;AAOhBU,uBAAexB,QAAQyB,IAAR,CAAaD,aAPZ;AAQhBE,uBAAe1B,QAAQsB,QAAR,CAAiBK,QAAjB,GAA4B,OAAO3B,QAAQsB,QAAR,CAAiBK,QAAjB,CAA0BC,IAAjC,KAA0C,UAA1C,GAAuD5B,QAAQsB,QAAR,CAAiBK,QAAjB,CAA0BC,IAA1B,EAAvD,GAA0F,CAAtH,GAA0H;AARzH,OAAlB;;AAWA;AACA;AACA;AACH,UAAIC,qBAAoB;AACvBL,uBAAgBxB,QAAQkB,OAAR,CAAgB,iBAAhB,CADO;AAEvBY,mBAAW9B,QAAQkB,OAAR,CAAgB,YAAhB;AAFY,OAAxB;;AAKA1B,aAAOuC,GAAP,CAAY,YAAWC,KAAKC,SAAL,CAAeJ,kBAAf,EAAmC,IAAnC,EAAyC,CAAzC,CAA4C,EAAnE;AACE,KA7BD;;AA+BA/B;AACD;AA3CqB,CAAxB;;AA8CAJ,kBAAkBC,QAAlB,CAA2BuC,UAA3B,GAAwC;AACtCC,QAAM,aADgC;AAEtCC,WAAS;AAF6B,CAAxC;;AAKO,IAAIzC,8BAAWD,kBAAkBC,QAAjC","file":"logRequests.js","sourcesContent":["/* eslint no-nested-ternary: \"off\" */\nlet logger = console;\n\n/**\n * Plugin for logging details for every request that comes through the server.\n * http://hapijs.com/tutorials/plugins\n */\nlet logRequestsPlugin = {\n  register: (server, options, next) => {\n\n    // listen to all requests\n    server.ext('onRequest', function (request, reply) {\n      // keep track of this request's start time, so we can evaluate it once reply is called by the handler.\n      request.plugins.startTime = Date.now();\n      return reply.continue();\n    });\n\n    // listen to all responses\n    server.on('response', (request)=> {\n\t\t\tlet ignoreUrls = ['.css', '.js', '.wav', '.mp3'];\n\t\t\tfor(let ignore of ignoreUrls){\n\t\t\t\tif(request.url.href.indexOf(ignore) >=0){return;}\n\t\t\t}\n      // calculate how long it took from request to response.\n      let endTime = Date.now();\n      let duration = endTime - request.plugins.startTime;\n      //let {authorization, ...headersWithTokenOmmitted} = request.headers; //eslint-disable-line\n      let requestData = {\n        requestId: request.id,\n        headers: request.headers,\n        method: request.method.toUpperCase(),\n        url: request.url.href,\n        statusCode: request.response.statusCode,\n        responseTimeMilli: duration,\n        remoteAddress: request.info.remoteAddress,\n        responseBytes: request.response._payload ? typeof request.response._payload.size === 'function' ? request.response._payload.size() : 0 : 0\n      };\n\n      // grok_pattern: %{WORD:request_verb} %{URIPATHPARAM:request_path} %{INT:response_status} (%{INT:response_bytes}|-) - %{BASE10NUM:response_time;float} ms -\n      // %{IPV4MAPPEDIPV6:remote_addr}\n      //let graylogExtractorFormattedRequestData = `${requestData.method} ${requestData.url} ${requestData.statusCode} ${requestData.responseBytes} - ${requestData.responseTimeMilli} ms - ::ffff:${requestData.remoteAddress} - ${JSON.stringify(requestData.headers)}`; //eslint-disable-line\n\t\t\tlet minimalRequestData ={\n\t\t\t\tremoteAddress : request.headers[\"x-forwarded-for\"],\n\t\t\t\tuserAgent: request.headers[\"user-agent\"]\n\t\t\t};\n\n\t\t\tlogger.log(`request: ${JSON.stringify(minimalRequestData, null, 2)}`);\n    });\n\n    next();\n  }\n};\n\nlogRequestsPlugin.register.attributes = {\n  name: 'logRequests',\n  version: '1.0.0'\n};\n\nexport let register = logRequestsPlugin.register;\n"]}