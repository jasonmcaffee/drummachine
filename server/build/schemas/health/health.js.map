{"version":3,"sources":["../../../src/schemas/health/health.js"],"names":["serverStatus","object","required","keys","ok","boolean","description","example","config","meta","className","osStatus","hostname","string","type","platform","arch","release","uptime","number","loadavg","array","totalmem","freemem","cpus","model","speed","times","user","nice","sys","idle","irq","networkInterfaces","lo0","address","netmask","family","mac","scopeid","internal","systemOverallStatus","healthResponse"],"mappings":"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","file":"health.js","sourcesContent":["import Joi from 'joi';\nimport {configSchema} from 'schemas/config/config';\n\nexport let serverStatus = Joi.object().required()\n    .keys({\n      ok: Joi.boolean().required()\n            .description('true if server and all subsystems are functioning, false otherwise')\n            .example(true),\n      config: configSchema\n    })\n    .meta({className: 'serverStatus'}); // so hapi swagger shows non-auto-generated model name.\n\n\nexport let osStatus = Joi.object().required()\n    .keys({\n      ok: Joi.boolean().required()\n            .description('true if server and all subsystems are functioning, false otherwise')\n            .example(true),\n\n      hostname: Joi.string().required()\n            .description('name of the host the service is running on')\n            .example('Jasons-Macbook.local'),\n\n      type: Joi.string().required()\n            .description('type of os')\n            .example('Darwin'),\n\n      platform: Joi.string().required()\n            .description('name of the os platform')\n            .example('darwin'),\n\n      arch: Joi.string().required()\n            .description('cpu architecture')\n            .example('x64'),\n\n      release: Joi.string().required()\n            .description('os release version')\n            .example('15.6.0'),\n\n      uptime: Joi.number().required()\n            .description('how long the system has been running for')\n            .example(349174),\n\n      loadavg: Joi.array().required()\n            .description('load times for the system')\n            .example([\n              1.6650390625,\n              1.92578125,\n              1.88427734375\n            ]),\n\n      totalmem: Joi.number().required()\n            .description('total memory available to the os')\n            .example(17179869184),\n\n      freemem: Joi.number().required()\n            .description('free memory available to the os')\n            .example(944484352),\n\n      cpus: Joi.array().required()\n            .description('cpu info')\n            .example([\n              {\n                model: 'Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz',\n                speed: 2200,\n                times: {\n                  user: 6358970,\n                  nice: 0,\n                  sys: 7772390,\n                  idle: 72638900,\n                  irq: 0\n                }\n              }\n            ]),\n\n      networkInterfaces: Joi.object().required()\n            .description('network interfaces available to the os')\n            .example({\n              lo0: [\n                {\n                  address: '::1',\n                  netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\n                  family: 'IPv6',\n                  mac: '00:00:00:00:00:00',\n                  scopeid: 0,\n                  internal: true\n                }\n              ]\n            }),\n\n\n    })\n  .meta({className: 'osStatus'}); // so hapi swagger shows non-auto-generated model name.\n\nexport let systemOverallStatus = Joi.object()\n    .keys({\n      ok: Joi.boolean().required()\n            .description('true if server and all subsystems are functioning, false otherwise')\n            .example(true)\n    })\n  .meta({className: 'systemOverallStatus'}); // so hapi swagger shows non-auto-generated model name.\n\nexport let healthResponse = Joi.object().required()\n    .keys({\n      serverStatus,\n      systemOverallStatus,\n      osStatus\n    })\n    .meta({className: 'healthResponse'}); // so hapi swagger shows non-auto-generated model name.\n"]}